<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Cringed Coder Blog]]></title><description><![CDATA[Cringed Coder's posts storage.]]></description><link>https://cringedcoder.github.io/</link><image><url>https://cringedcoder.github.io/img/avatar.png</url><title>Cringed Coder Blog</title><link>https://cringedcoder.github.io/</link></image><generator>metalsmith-feed</generator><lastBuildDate>Wed, 16 Aug 2017 23:45:00 GMT</lastBuildDate><atom:link href="https://cringedcoder.github.io/rss.xml" rel="self" type="application/rss+xml"/><copyright><![CDATA[2017 Cringed Coder]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[Cringed Coder]]></managingEditor><webMaster><![CDATA[Cringed Coder]]></webMaster><category><![CDATA[Programming]]></category><category><![CDATA[IT]]></category><category><![CDATA[Code]]></category><category><![CDATA[JavaScript]]></category><category><![CDATA[GIT]]></category><category><![CDATA[Front-end]]></category><category><![CDATA[Web Developement]]></category><category><![CDATA[Developer]]></category><item><title><![CDATA[Webpack configuration tips]]></title><description><![CDATA[<h2 id="how-to-get-scss-variables-inside-js-code-">How to get scss variables inside js code?</h2>
<p>Install ScssToJson</p>
<pre><code class="hljs bash">npm install scss-to-json --save-dev</code></pre>
Import scss-to-json
<pre><code class="hljs js"><span class="hljs-keyword">let</span> scssToJson = <span class="hljs-built_in">require</span>(<span class="hljs-string">'scss-to-json'</span>);</code></pre>
Provide scss object in externals
<pre><code class="hljs js">externals: {
  <span class="hljs-attr">scss</span>: <span class="hljs-built_in">JSON</span>.stringify(scssToJson(scssVariablesPath))
}</code></pre>
Use it like a module:
<pre><code class="hljs js"><span class="hljs-keyword">import</span> scss <span class="hljs-keyword">from</span> <span class="hljs-string">'scss'</span>;

<span class="hljs-built_in">console</span>.log(scss[<span class="hljs-string">'$color-black'</span>]); <span class="hljs-comment">// #000</span></code></pre>

<h2 id="how-to-get-jquery-exposed-for-other-libs-">How to get jQuery exposed for other libs?</h2>
<p>Install jQuery</p>
<pre><code class="hljs bash">npm install jquery --save</code></pre>
Use ProvidePlugin plugin for webpack.
<pre><code class="hljs js">plugins: [
  <span class="hljs-keyword">new</span> webpack.ProvidePlugin({
    <span class="hljs-attr">$</span>: <span class="hljs-string">'jquery'</span>,
    <span class="hljs-attr">jQuery</span>: <span class="hljs-string">'jquery'</span>
  })
]</code></pre>

<p>For providing jquery from local project file see note in the next tip.</p>
<h2 id="how-to-make-imports-relative-to-sources-root-">How to make imports relative to sources root?</h2>
<p>Use alias configuration</p>
<pre><code class="hljs js">resolve: {
      <span class="hljs-attr">alias</span>: {
          <span class="hljs-attr">sources</span>: path.resolve(
              <span class="hljs-string">'./src'</span>
          )
      }
  }</code></pre>
Later on you can use following import path
<pre><code class="hljs js"><span class="hljs-keyword">import</span> component <span class="hljs-keyword">from</span> <span class="hljs-string">'soruces/js/component'</span>;</code></pre>
Note that it is possible to use aliases in webpack config too. For example in
ProvidePlugin:
<pre><code class="hljs js">plugins: [
    <span class="hljs-keyword">new</span> webpack.ProvidePlugin({
      <span class="hljs-attr">$</span>: <span class="hljs-string">'jquery'</span>,
      <span class="hljs-attr">jQuery</span>: <span class="hljs-string">'jquery'</span>,
      <span class="hljs-attr">Popper</span>: <span class="hljs-string">'sources/js/vendors/popper.js'</span>
    })
]</code></pre>

<h2 id="how-to-use-babel-for-code-transpilation-">How to use babel for code transpilation?</h2>
<p>Install needed loaders, presets and plugins</p>
<p><pre><code class="hljs bash">npm install --save-dev babel-loader babel-core babel-preset-env babel-plugin-syntax-dynamic-import babel-plugin-transform-runtime</code></pre>
Config loader as follows</p>
<p><pre><code class="hljs js"><span class="hljs-built_in">module</span>: {
  <span class="hljs-attr">rules</span>: [
    {
      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/.js$/</span>,
      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components|js\/vendors)/</span>,
      <span class="hljs-attr">use</span>: {
        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#39;babel-loader&#39;</span>,
        <span class="hljs-attr">options</span>: {
          <span class="hljs-attr">presets</span>: [[
            <span class="hljs-string">&#39;env&#39;</span>,
            {
                <span class="hljs-attr">targets</span>: {
                    <span class="hljs-attr">browsers</span>: [<span class="hljs-string">&#39;last 2 versions&#39;</span>, <span class="hljs-string">&#39;ie &gt;= 10&#39;</span>, <span class="hljs-string">&#39;safari &gt;= 9&#39;</span>]
                },
                <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-literal">true</span>,
                <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>
            }
          ]],
          <span class="hljs-attr">plugins</span>: [
              <span class="hljs-string">&#39;syntax-dynamic-import&#39;</span>,
              <span class="hljs-string">&#39;transform-runtime&#39;</span>
          ],
          <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span>
        }
      }
    }
  ]
}</code></pre></p>
<ul>
<li>The <em>test</em> option provides regexp which filter imports by import path</li>
<li>The <em>exclude</em> option filters node_modules or bower_components as so vendors
are not processed (in npm still ES5 modules are standard)</li>
<li>The <em>loader</em> tells webpack which loader is going to be used</li>
<li>The <em>options</em> are passed to the loader</li>
<li>The presets env option selects babel-preset-env</li>
<li>The presets targets option bakes polyfills for specific browser versions</li>
<li>The presets useBuiltIns option replaces import &quot;babel-polyfill&quot;; with individual requires for babel-polyfill based on environment</li>
<li>The plugins syntax-dynamic-import provides dynamic import syntax with magic comments</li>
<li>The plugins transform-runtime reduces polyfills bloat (here is why <a href="https://babeljs.io/docs/plugins/transform-runtime/">https://babeljs.io/docs/plugins/transform-runtime/</a>)</li>
<li>The cacheDirectory option tells babel to cache builds</li>
</ul>
<p>Using debug: true provides full list of used transformations and polyfills.</p>
]]></description><link>https://cringedcoder.github.io/posts/webpack-configuration-tips.html</link><guid isPermaLink="true">https://cringedcoder.github.io/posts/webpack-configuration-tips.html</guid><dc:creator><![CDATA[cringedcoder]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[Pushing subtree to master]]></title><description><![CDATA[<p>I&#39;m using Metalsmith to build this static blog at the moment. Well
I&#39;ve just started and already came across some obstacles. How Metalsmith works
is it takes contents of source directory, processes through pipeline and outputs
results to destination directory. It&#39;s ok. Thatâ€™s what expected to happen.
But it&#39;s troublesome when it comes to use the results as GitHub personal page 
(just like this one).</p>
<p>GitHub pages are making user to use master branch as main branch for publishing
page content. User cannot use .htaccess or .config because GitHub does not allow
that - security reasons. I don&#39;t want to use Jekyll _config.yml file to redirect
from because it uses HTTP-REFRESH meta tag. And I don&#39;t want to build to current
directory because of a mess that&#39;s going to happen. The only idea I&#39;ve come up
is to create separate branch for all the files required to build the site,
and make master branch to store only built static files. But copying files
manually is not worth considering.</p>
<p>The best solution I&#39;ve come across is to use the git subtree command. The case
with GitHub personal page is the opposite to GitHub project page. In GitHub
project page we would create custom_source_branch and subtree to gh-pages or
different custom_page_branch which would be indicated in settings as GitHub page
branch. In this case we can&#39;t change the GitHub personal page branch. It always
is master. So I&#39;ve created gh-pages branch and pushed all the files in there.</p>
<pre><code class="hljs bash">git checkout -b gh-pages
git add --all
git commit -m <span class="hljs-string">'Initial page'</span>
git push --set-upstream origin gh-pages</code></pre>
Then tried to subtree my build directory to master.
<pre><code class="hljs bash">git subtree push --prefix build origin master</code></pre>
Usually when setting up project GitHub creates README.md. Sometimes we already
have some changes on master. In any case if master becomes a subtree, there
almost always will be a conflict. Differences between subtree and a target
branch makes creating a subtree impossible.
<pre><code class="hljs">git subtree push --prefix build origin master
git push using:  origin master
To git@git-cringedcoder:cringedcoder/cringedcoder<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span>
 ! [rejected]        ba888d9a95c939f6c0146487189f0b7e282d208a -&gt; master (non-fast-forward)
 error: failed to push some refs to <span class="hljs-string">'git@git-cringedcoder:cringedcoder/cringedcoder.github.io.git'</span>
 hint: Updates were rejected because <span class="hljs-selector-tag">a</span> pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e<span class="hljs-selector-class">.g</span>. <span class="hljs-string">'git pull ...'</span>) before pushing again.
hint: See the <span class="hljs-string">'Note about fast-forwards'</span> <span class="hljs-keyword">in</span> <span class="hljs-string">'git push --help'</span> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">details</span>.</code></pre>
The solution is to force push subtree to master branch. Note that all changes on
master will be overwritten so use the following command with care.
<pre><code>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> `git subtree <span class="hljs-built_in">split</span> --<span class="hljs-built_in">prefix</span> build gh-pages`:master --force</code></pre>
What this command do is this that it chains creating a subtree with force push
to master branch. Creating a subtree separated build directory
of gh-pages branch into a new "on the fly branch". Then the new branch was
passed as one of the parameters to the force push command. The contents of
master branch were overwritten by subtree.
After forcing first subtree push there is no need to force it later on.
Simply use following command and it will subtree without a conflict.
<pre><code class="hljs bash">git subtree push --prefix build origin master</code></pre>
]]></description><link>https://cringedcoder.github.io/posts/pushing-subtree-to-master.html</link><guid isPermaLink="true">https://cringedcoder.github.io/posts/pushing-subtree-to-master.html</guid><dc:creator><![CDATA[cringedcoder]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[Multiple SSH keys and Github users]]></title><description><![CDATA[<p>Git is a great tool. I&#39;ve been using SVN and Mercurial but for me Git hit the
spot. There are times I&#39;m sitting comfortable in chair git pulling or git
pushing feeling the flow and everything is working as expected. But sometimes
I want to change git account to another - private one and there is the hitch.</p>
<h2 id="option-1">Option 1</h2>
<p>I can set global config for my private account</p>
<pre><code class="hljs bash">git config --global user.name <span class="hljs-string">"Your Name Here"</span>
git config --global user.email your@email.com</code></pre>

<p>And I can specify individual user.name and user.email to use in specific repo.</p>
<pre><code class="hljs bash">git config user.name <span class="hljs-string">"Your Name Here"</span>
git config user.email your@email.com</code></pre>

<p>It works over https but what about ssh? I want to use my keys for the auth
process.</p>
<h2 id="option-2">Option 2</h2>
<p>In this option I assume that we have two ssh keys created and ready to use. If
not, follow this step-by-step guide at 
<a href="https://help.github.com/articles/connecting-to-github-with-ssh/">help.github.com</a></p>
<p>Back to the topic. I can make ssh config to handle it for me. First of all
I need to create or edit ~/.ssh/config and configure two or more hosts in there.</p>
<pre><code class="hljs"><span class="hljs-comment"># Personal Github</span>
Host github-cringedcoder
HostName github.com
<span class="hljs-keyword">User</span> <span class="hljs-title">cringedcoder</span>
IdentityFile ~/.ssh/id_rsa_cringedcoder

<span class="hljs-comment"># Work</span>
Host github.com
HostName github.com
<span class="hljs-keyword">User</span> <span class="hljs-title">git</span>
IdentityFile ~/.ssh/id_rsa</code></pre>
Later if I want to write code as cringedcoder I have to provide address with
changed hostname.

<pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github-cringedcoder:cringedcoder/cringedcoder.github.io.git</code></pre>
Also if I already have cloned repo and I want to change account without cloning
it again, I change url in [remote "origin"] section in .git/config file of the
repo, or simply 
<pre><code class="hljs bash">git remote <span class="hljs-built_in">set</span>-url origin git@github-cringedcoder:cringedcoder/cringedcoder.github.io.git</code></pre>
And then I have to change user for this specific repo in case of commit user
mismatch.
<pre><code class="hljs bash">git config user.name <span class="hljs-string">"Cringed Coder"</span>
git config user.email <span class="hljs-string">"[ommited]"</span></code></pre>
]]></description><link>https://cringedcoder.github.io/posts/multiple-ssh-keys-and-github-users.html</link><guid isPermaLink="true">https://cringedcoder.github.io/posts/multiple-ssh-keys-and-github-users.html</guid><dc:creator><![CDATA[cringedcoder]]></dc:creator><pubDate>Invalid Date</pubDate></item></channel></rss>